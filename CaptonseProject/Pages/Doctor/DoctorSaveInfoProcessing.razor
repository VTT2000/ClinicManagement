@page "/doctor/infoProcessing/{IdAppointment:int}"
@page "/doctor/infoProcessing/{IdAppointment:int}/{diagnosisID:int}"

@layout AdminLayout
@inject DoctorFEService doctorService

<div class="container-fluid">
    <!-- Tabs -->
    <ul class="nav nav-tabs" id="khamTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="diagnosis-tab" data-bs-toggle="tab" data-bs-target="#diagnosis"
                type="button" role="tab">Chẩn đoán</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="serviceParaclinical-tab" data-bs-toggle="tab" data-bs-target="#serviceParaclinical" type="button"
                role="tab">Xét nghiệm</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="prescription-tab" data-bs-toggle="tab" data-bs-target="#prescription" type="button"
                role="tab">Toa thuốc</button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content p-3 border border-top-0" id="khamTabContent">
        <div class="tab-pane fade show active" id="diagnosis" role="tabpanel">
            <div class="container-fluid bg-white text-black">
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="me-2 form-label">Dịch vụ khám bệnh lâm sàng:</label>
                        @if(!infoClinicalService.StatusCode.HasValue){
                            <button class="btn btn-primary" @onclick="ShowModal">
                                <i class="bi bi-plus-circle me-2"></i>Thêm mới
                            </button>
                        }
                        else{
                            if(infoClinicalService.StatusCode == StatusCodes.Status200OK){
                                <span>@infoClinicalService.Data!.ServiceName</span>
                            }
                            else{
                                <span>@infoClinicalService.Message</span>
                            }
                            <button @onclick="SetClinicalServiceIDasNull" class="ms-2 btn btn-danger" >
                                <i class="bi bi-x-circle me-2"></i>Hủy
                            </button>
                        }
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Triệu chứng</label>
                        <textarea rows="2" class="form-control" placeholder="Nhập triệu chứng" /> 
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Kết quả khám</label>
                        <textarea rows="3" class="form-control" placeholder="Nhập kết quả khám của cơ thể bệnh nhân" /> 
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Kết luận (chẩn đoán)</label>
                        <textarea rows="2" class="form-control" placeholder="Nhập kết luận (chẩn đoán)" /> 
                    </div>
                    
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="serviceParaclinical" role="tabpanel">
            <div class="container-fluid bg-white text-black">
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="me-2 form-label">Các dịch vụ xét nghiệm:</label>
                        <button class="btn btn-primary" @onclick="ShowModal2">
                            <i class="bi bi-plus-circle me-2"></i>Thêm mới
                        </button>
                    </div>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover table-bordered">
                                        @* gắn dữ liệu ở đây *@
                                        <thead>
                                            <tr>
                                                <th>Số thứ tự</th>
                                                <th>Tên xét nghiệm</th>
                                                <th>Hành động</th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                            <!-- Dòng 1 -->
                                            @{
                                                var i = 1;
                                            }
                                            @* @foreach (var item in list.Data!.Data!)
                                            {
                                                <tr>
                                                    <td>@i</td>
                                                    <td>@(item.ServiceName)</td>
                                                    <td>
                                                        <div class="btn-group">
                                                            <button class="btn btn-sm btn-outline-danger">
                                                                <i class="bi bi-trash"></i> Xóa
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                                i++;
                                            } *@
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Phân trang -->
                                <nav aria-label="Page navigation" class="mt-4">
                                    <ul class="pagination justify-content-center">
                                        @* <li class="page-item @(list.Data!.PageNumber == 1 ? "disabled" : "")">
                                            <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(list.Data!.PageNumber - 1)">Trước</a>
                                        </li>

                                        @foreach (var page in GetPageNumbersToDisplay())
                                        {
                                            if (page == -1)
                                            {
                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                            }
                                            else
                                            {
                                                <li class="page-item @(page == list.Data!.PageNumber ? "active" : "")">
                                                    <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(page)">@(page)</a>
                                                </li>
                                            }
                                        }

                                        <li class="page-item @(list.Data!.PageNumber == list.Data!.TotalPages ? "disabled" : "")">
                                            <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(list.Data!.PageNumber + 1)">Sau</a>
                                        </li> *@
                                    </ul>
                                </nav>
                                
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="prescription" role="tabpanel">
            333
        </div>

    </div>
</div>

<ModalSelectedClinicalService IsVisible="@isModalVisible" OnSeletedClinicalService="OnSeletedClinicalService" OnClose="HideModal" />
<ModalSelectedParaclinicalService IsVisible="@isModalVisible2" OnSeletedParaclinicalService="OnSeletedParaclinicalService" OnClose="HideModal2" />

@code {
    [Parameter]
    public int IdAppointment {get; set;}
    [Parameter]
    public int? diagnosisID {get; set;}
    private DetailSaveDiagnosisDoctorVM detailSaveDiagnosisDoctorVM = new DetailSaveDiagnosisDoctorVM();

    private HTTPResponseClient<ServiceVM> infoClinicalService = new HTTPResponseClient<ServiceVM>();
    private HTTPResponseClient<PagedResponse<List<ParaClinicalServiceInfoForDoctorVM>>> listServiceParaclinical = new HTTPResponseClient<PagedResponse<List<ParaClinicalServiceInfoForDoctorVM>>>();
    protected override async Task OnInitializedAsync()
    {
        if(diagnosisID == null){
            detailSaveDiagnosisDoctorVM = new DetailSaveDiagnosisDoctorVM();
            detailSaveDiagnosisDoctorVM.AppointmentId = IdAppointment;
        }
        else{
            detailSaveDiagnosisDoctorVM = await doctorService.GetDiagnosisDoctorByIDAsync(diagnosisID.Value);
        }
        await SetMessageClinicalService();
        await base.OnInitializedAsync();
    }

    private async Task SetClinicalServiceIDasNull(){
        detailSaveDiagnosisDoctorVM.ClinicalServiceId = null;
        await SetMessageClinicalService();
    }
    private async Task SetMessageClinicalService(){
        if(!detailSaveDiagnosisDoctorVM.ClinicalServiceId.HasValue || detailSaveDiagnosisDoctorVM.ClinicalServiceId == 0){
            infoClinicalService = new HTTPResponseClient<ServiceVM>();
        }
        else{
            infoClinicalService = await doctorService.GetServiceVMByIDAsync(detailSaveDiagnosisDoctorVM.ClinicalServiceId.Value);
        }
    }

    private bool isModalVisible = false;
    private void ShowModal()
    {
        isModalVisible = true;
    }
    private async Task OnSeletedClinicalService(int serviceID){
        detailSaveDiagnosisDoctorVM.ClinicalServiceId = serviceID;
        await SetMessageClinicalService();
    }
    private void HideModal()
    {
        isModalVisible = false;
    }

    private bool isModalVisible2 = false;
    private void ShowModal2()
    {
        isModalVisible2 = true;
    }
    private async Task OnSeletedParaclinicalService(List<int> parclinicalList){
        detailSaveDiagnosisDoctorVM.ParaclinicalServiceList.AddRange(parclinicalList);
        Console.WriteLine(JsonSerializer.Serialize(detailSaveDiagnosisDoctorVM.ParaclinicalServiceList));
        @* await SetMessageClinicalService(); *@
    }
    private void HideModal2()
    {
        isModalVisible2 = false;
    }

    @* private List<int> GetPageNumbersToDisplay(string status)
    {
        const int range = 2; // Số trang hiển thị trước và sau trang hiện tại
        var pages = new List<int>();
        
        if(status.Equals(StatusConstant.AppointmentStatus.Waiting)){
            if (doctorService.listAppointmentPatientForDoctorWaiting.TotalPages <= 7)
            {
                for (int i = 1; i <= doctorService.listAppointmentPatientForDoctorWaiting.TotalPages; i++) pages.Add(i);
            }
            else
            {
                pages.Add(1);
                if (doctorService.listAppointmentPatientForDoctorWaiting.PageNumber > range + 2) pages.Add(-1); // dấu "..."

                for (int i = Math.Max(2, doctorService.listAppointmentPatientForDoctorWaiting.PageNumber - range); i <= Math.Min(doctorService.listAppointmentPatientForDoctorWaiting.TotalPages - 1, doctorService.listAppointmentPatientForDoctorWaiting.PageNumber + range); i++)
                {
                    pages.Add(i);
                }

                if (doctorService.listAppointmentPatientForDoctorWaiting.PageNumber < doctorService.listAppointmentPatientForDoctorWaiting.TotalPages - range - 1) pages.Add(-1); // dấu "..."
                pages.Add(doctorService.listAppointmentPatientForDoctorWaiting.TotalPages);
            }
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Turned)){
            if (doctorService.listAppointmentPatientForDoctorTurned.TotalPages <= 7)
            {
                for (int i = 1; i <= doctorService.listAppointmentPatientForDoctorTurned.TotalPages; i++) pages.Add(i);
            }
            else
            {
                pages.Add(1);
                if (doctorService.listAppointmentPatientForDoctorTurned.PageNumber > range + 2) pages.Add(-1); // dấu "..."

                for (int i = Math.Max(2, doctorService.listAppointmentPatientForDoctorTurned.PageNumber - range); i <= Math.Min(doctorService.listAppointmentPatientForDoctorTurned.TotalPages - 1, doctorService.listAppointmentPatientForDoctorTurned.PageNumber + range); i++)
                {
                    pages.Add(i);
                }

                if (doctorService.listAppointmentPatientForDoctorTurned.PageNumber < doctorService.listAppointmentPatientForDoctorTurned.TotalPages - range - 1) pages.Add(-1); // dấu "..."
                pages.Add(doctorService.listAppointmentPatientForDoctorTurned.TotalPages);
            }
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Processing)){
            if (doctorService.listAppointmentPatientForDoctorProcessing.TotalPages <= 7)
            {
                for (int i = 1; i <= doctorService.listAppointmentPatientForDoctorProcessing.TotalPages; i++) pages.Add(i);
            }
            else
            {
                pages.Add(1);
                if (doctorService.listAppointmentPatientForDoctorProcessing.PageNumber > range + 2) pages.Add(-1); // dấu "..."

                for (int i = Math.Max(2, doctorService.listAppointmentPatientForDoctorProcessing.PageNumber - range); i <= Math.Min(doctorService.listAppointmentPatientForDoctorProcessing.TotalPages - 1, doctorService.listAppointmentPatientForDoctorProcessing.PageNumber + range); i++)
                {
                    pages.Add(i);
                }

                if (doctorService.listAppointmentPatientForDoctorProcessing.PageNumber < doctorService.listAppointmentPatientForDoctorProcessing.TotalPages - range - 1) pages.Add(-1); // dấu "..."
                pages.Add(doctorService.listAppointmentPatientForDoctorProcessing.TotalPages);
            }
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Diagnosed)){
            if (doctorService.listAppointmentPatientForDoctorDiagnosed.TotalPages <= 7)
            {
                for (int i = 1; i <= doctorService.listAppointmentPatientForDoctorDiagnosed.TotalPages; i++) pages.Add(i);
            }
            else
            {
                pages.Add(1);
                if (doctorService.listAppointmentPatientForDoctorDiagnosed.PageNumber > range + 2) pages.Add(-1); // dấu "..."

                for (int i = Math.Max(2, doctorService.listAppointmentPatientForDoctorDiagnosed.PageNumber - range); i <= Math.Min(doctorService.listAppointmentPatientForDoctorDiagnosed.TotalPages - 1, doctorService.listAppointmentPatientForDoctorDiagnosed.PageNumber + range); i++)
                {
                    pages.Add(i);
                }

                if (doctorService.listAppointmentPatientForDoctorDiagnosed.PageNumber < doctorService.listAppointmentPatientForDoctorDiagnosed.TotalPages - range - 1) pages.Add(-1); // dấu "..."
                pages.Add(doctorService.listAppointmentPatientForDoctorDiagnosed.TotalPages);
            }
        }
        

        return pages;
    } *@

    @* private async Task SelectPage(int page, string status)
    {
        if(status.Equals(StatusConstant.AppointmentStatus.Waiting)){
            if (page >= 1 && page <= doctorService.listAppointmentPatientForDoctorWaiting.TotalPages && page != doctorService.listAppointmentPatientForDoctorWaiting.PageNumber)
            {
                doctorService.listAppointmentPatientForDoctorWaiting.PageNumber = page;
                await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter);
            }
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Turned)){
            if (page >= 1 && page <= doctorService.listAppointmentPatientForDoctorTurned.TotalPages && page != doctorService.listAppointmentPatientForDoctorTurned.PageNumber)
            {
                doctorService.listAppointmentPatientForDoctorTurned.PageNumber = page;
                await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter2);
            }
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Processing)){
            if (page >= 1 && page <= doctorService.listAppointmentPatientForDoctorProcessing.TotalPages && page != doctorService.listAppointmentPatientForDoctorProcessing.PageNumber)
            {
                doctorService.listAppointmentPatientForDoctorProcessing.PageNumber = page;
                await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter3);
            }
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Diagnosed)){
            if (page >= 1 && page <= doctorService.listAppointmentPatientForDoctorDiagnosed.TotalPages && page != doctorService.listAppointmentPatientForDoctorDiagnosed.PageNumber)
            {
                doctorService.listAppointmentPatientForDoctorDiagnosed.PageNumber = page;
                await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter4);
            }
        }
        
    } *@

    @* private async Task SearchRequest(string status){
        if(status.Equals(StatusConstant.AppointmentStatus.Waiting)){
            await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter);
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Turned)){
            await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter2);
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Processing)){
            await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter3);
        }
        if(status.Equals(StatusConstant.AppointmentStatus.Diagnosed)){
            await doctorService.GetAllListPatientForDocTorAsync2(conditionFilter4);
        }
    } *@

    

    protected override async Task OnParametersSetAsync(){
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        // Hủy lắng nghe khi component bị hủy
        @* doctorService.OnChange -= StateHasChanged; *@
    }
}