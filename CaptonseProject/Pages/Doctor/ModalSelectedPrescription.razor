@inject DoctorFEService doctorService

<!-- Modal.razor -->
<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg" @onclick:stopPropagation>
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kê thuốc</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-md-12">
                            <div class="input-group">
                                <input @bind="pagedResponseSearchText!.Data" type="text" class="form-control" placeholder="Tìm kiếm theo tên" />
                                <button @onclick="SearchInputKey" class="btn btn-secondary" type="button">
                                    <i class="bi bi-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    @if (isLoaded.HasValue && !isLoaded.Value)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (list.StatusCode.HasValue && !(list.StatusCode.Value == StatusCodes.Status200OK))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @list.Message
                        </div>
                    }
                    else
                    {
                        <!-- Bảng hiển thị danh sách người dùng -->
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover table-bordered">
                                        @* gắn dữ liệu ở đây *@
                                        <thead>
                                            <tr>
                                                <th>Số thứ tự</th>
                                                <th>Tên thuốc</th>
                                                <th>Dạng thuốc</th>
                                                <th>Hành động</th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                            <!-- Dòng 1 -->
                                            @{
                                                var i = 1;
                                            }
                                            @foreach (var item in list.Data!.Data!)
                                            {
                                                <tr>
                                                    <td>@i</td>
                                                    <td>@(item.MedicineName)</td>
                                                    <td>@(item.Unit)</td>
                                                    <td>
                                                        <div class="btn-group">
                                                            <button @onclick="()=>SeletedMedicine(item.MedicineId)" class="btn btn-sm btn-outline-primary">
                                                                Chọn
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                                i++;
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Phân trang -->
                                <nav aria-label="Page navigation" class="mt-4">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(list.Data!.PageNumber == 1 ? "disabled" : "")">
                                            <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(list.Data!.PageNumber - 1)">Trước</a>
                                        </li>

                                        @foreach (var page in GetPageNumbersToDisplay())
                                        {
                                            if (page == -1)
                                            {
                                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                            }
                                            else
                                            {
                                                <li class="page-item @(page == list.Data!.PageNumber ? "active" : "")">
                                                    <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(page)">@(page)</a>
                                                </li>
                                            }
                                        }

                                        <li class="page-item @(list.Data!.PageNumber == list.Data!.TotalPages ? "disabled" : "")">
                                            <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(list.Data!.PageNumber + 1)">Sau</a>
                                        </li>
                                    </ul>
                                </nav>
                                
                            </div>
                        </div>
                    }
                    <h3>Danh sách thuốc hiện tại</h3>
                    <div class="card">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover table-bordered">
                                    @* gắn dữ liệu ở đây *@
                                    <thead>
                                        <tr>
                                            <th>Số thứ tự</th>
                                            <th>Tên thuốc</th>
                                            <th>Dạng thuốc</th>
                                            <th>Hành động</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        <!-- Dòng 1 -->
                                        @{
                                            var st = 1;
                                        }
                                        @foreach (var item in listTemp.Data!)
                                        {
                                            <tr>
                                                <td>@st</td>
                                                <td>@(item.MedicineName)</td>
                                                <td>@(item.Unit)</td>
                                                <td>
                                                    <div class="btn-group">
                                                        <button @onclick="()=>DeletedMedicine(item.MedicineId)" class="btn btn-sm btn-outline-danger">
                                                            <i class="bi bi-trash"></i> Xóa
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                            st++;
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>


                </div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SavePrescriptionDetail">Lưu</button>
                @* <button class="btn btn-secondary" @onclick="Close">Đóng</button> *@
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<(int, List<int>)> OnSeletedPrescriptionDetail {get;set;}
    [Parameter]
    public int IndexMedicineCurent { get; set; }
    [Parameter]
    public List<int> MedicineListCurrent { get; set; } = new List<int>();

    private bool? isLoaded;
    private PagedResponse<string> pagedResponseSearchText = new PagedResponse<string>();
    private HTTPResponseClient<PagedResponse<List<MedicineForDiagnosisDoctorVM>>> list = new HTTPResponseClient<PagedResponse<List<MedicineForDiagnosisDoctorVM>>>();
    private HTTPResponseClient<List<MedicineForDiagnosisDoctorVM>> listTemp = new HTTPResponseClient<List<MedicineForDiagnosisDoctorVM>>();

    private List<int> GetPageNumbersToDisplay()
    {
        const int range = 2; // Số trang hiển thị trước và sau trang hiện tại
        var pages = new List<int>();
        if (list.Data!.TotalPages <= 7)
        {
            for (int i = 1; i <= list.Data!.TotalPages; i++) pages.Add(i);
        }
        else
        {
            pages.Add(1);
            if (list.Data!.PageNumber > range + 2) pages.Add(-1); // dấu "..."
            for (int i = Math.Max(2, list.Data!.PageNumber - range); i <= Math.Min(list.Data!.TotalPages - 1, list.Data!.PageNumber + range); i++)
            {
                pages.Add(i);
            }
            if (list.Data!.PageNumber < list.Data!.TotalPages - range - 1) pages.Add(-1); // dấu "..."
            pages.Add(list.Data!.TotalPages);
        }
        return pages;
    }

    private async Task SelectPage(int page)
    {
        if (page >= 1 && page <= list.Data!.TotalPages && page != list.Data!.PageNumber)
        {
            list.Data!.PageNumber = page;
            await SearchInputKey();
        }
    }

    private async Task SearchInputKey(){
        pagedResponseSearchText.PageSize = list.Data!.PageSize;
        pagedResponseSearchText.PageNumber = list.Data!.PageNumber;
        isLoaded = false;
        list = await doctorService.GetAllMedicineForSearchDoctor(pagedResponseSearchText);
        isLoaded = true;
    }

    private async Task SeletedMedicine(int medicineID){
        if(!MedicineListCurrent.Contains(medicineID)){
            MedicineListCurrent.Add(medicineID);
            await SetMedicineListCurrentShow();
        }
    }

    private async Task DeletedMedicine(int medicineID){
        MedicineListCurrent.Remove(medicineID);
        await SetMedicineListCurrentShow();
    }

    private async Task SetMedicineListCurrentShow(){
        if(MedicineListCurrent.Count != 0){
            listTemp = await doctorService.GetAllMedicineForDoctorByIdAsync(MedicineListCurrent);
        }
        else{
            listTemp = new HTTPResponseClient<List<MedicineForDiagnosisDoctorVM>>();
            listTemp.Data = new List<MedicineForDiagnosisDoctorVM>();
        }
    }

    private void LoadDataAsDefault(){
        isLoaded = null;
        pagedResponseSearchText = new PagedResponse<string>();
        pagedResponseSearchText.Data = string.Empty;
        list = new HTTPResponseClient<PagedResponse<List<MedicineForDiagnosisDoctorVM>>>();
        list.Data = new PagedResponse<List<MedicineForDiagnosisDoctorVM>>();
        list.Data.Data = new List<MedicineForDiagnosisDoctorVM>();
        list.Data.PageSize = 10;
        list.Data.PageNumber = 1;
        list.Data.TotalRecords = 0;
        list.Data.TotalPages = 0;
        listTemp = new HTTPResponseClient<List<MedicineForDiagnosisDoctorVM>>();
        listTemp.Data = new List<MedicineForDiagnosisDoctorVM>();
    }

    private async Task SavePrescriptionDetail()
    {
        await OnSeletedPrescriptionDetail.InvokeAsync((IndexMedicineCurent, MedicineListCurrent));
        await Close();
    }
    private async Task Close()
    {
        LoadDataAsDefault();
        await OnClose.InvokeAsync();
    }

    protected override async Task OnInitializedAsync(){
        LoadDataAsDefault();
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync(){
        await SetMedicineListCurrentShow();
        await base.OnParametersSetAsync();
    }
}
