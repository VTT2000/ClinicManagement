@page "/login"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ILoginService  LoginService

<div class="container-fluid vh-100">
    <div class="row h-100">
        <!-- Left Section -->
        <div class="col-md-6 d-flex align-items-center justify-content-center bg-primary text-white">
            <div class="text-center p-4">
                <h1 class="display-4">Gofinance</h1>
                <p class="lead">The most popular peer to peer lending at SEA</p>
                <button class="btn btn-outline-light btn-lg mt-3">Read More</button>
            </div>
        </div>

        <!-- Right Section (Login Form) -->
        <div class="col-md-6 d-flex align-items-center justify-content-center bg-light">
            <div class="p-4" style="max-width: 400px; width: 100%;">
                <h2 class="mb-4">Hello Again!</h2>
                <h5 class="text-muted mb-4">Welcome Back</h5>
                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-envelope"></i>
                            </span>
                            <InputText type="email" class="form-control" @bind-Value="loginModel.Account"
                                placeholder="Email" />
                            <ValidationMessage For="@(() => loginModel.Account)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-lock"></i>
                            </span>
                            <InputText type="password" class="form-control" @bind-Value="loginModel.Password"
                                placeholder="Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">Loading...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>
                    <div class="text-center">
                        <a href="/register" class="text-muted">Don't have an account? Register</a>
                    </div>
                </EditForm>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await LoginService.LoginAsync(loginModel.Account, loginModel.Password);
            
            if (result.IsSuccess)
            {
                // Chuyển hướng đến trang chính
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false; // Kết thúc hiệu ứng loading
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Account { get; set; }

        [Required]
        public string Password { get; set; }
    }
}