@page "/receptionist/schedule/doctor/detail"
@page "/receptionist/schedule/doctor/detail/{WorkScheduleID:int}"

@layout AdminLayout
@inject ReceptionistService receptionistService
@inject IToastService ToastService
@inject ReceptionistService receptionistService

<div class="container">
    <EditForm Model="@doctorDetailVM" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="row mb-3">
        <h3>Thông tin lịch làm việc</h3>
        <div class="col-md-6">
            <label class="form-label">Ngày bắt đầu</label>
            <input type="date" class="form-control" placeholder="Nhập ngày bắt đầu"
            @bind="doctorDetailVM.StartDate" >
            <ValidationMessage For="@(() => doctorDetailVM.StartDate)" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Ngày kết thúc</label>
            <input type="date" class="form-control" placeholder="Nhập ngày kết thúc"
            @bind="doctorDetailVM.EndDate" >
            <ValidationMessage For="@(() => doctorDetailVM.EndDate)" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Giờ bắt đầu</label>
            <input type="time" class="form-control" placeholder="Nhập giờ bắt đầu"
            @bind="doctorDetailVM.StartTime" >
            <ValidationMessage For="@(() => doctorDetailVM.StartTime)" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Giờ kết thúc</label>
            <input type="time" class="form-control" placeholder="Nhập giờ kết thúc"
            @bind="doctorDetailVM.EndTime" >
            <ValidationMessage For="@(() => doctorDetailVM.EndTime)" />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-12">
            <label class="me-2 form-label">Bác sĩ:</label>
            @if(!infoSelected.StatusCode.HasValue){
                <button class="btn btn-sm btn-primary" type="button" @onclick="ShowModal">
                    <i class="bi bi-plus-circle me-2"></i>Chọn bác sĩ
                </button>
            }
            else{
                if(infoSelected.StatusCode == StatusCodes.Status200OK){
                    <span>@infoSelected.Data!.FullName</span>
                    <span> / Chuyên môn: @infoSelected.Data.Specialization</span>
                }
                else{
                    <span>@infoSelected.Message</span>
                }
                <button @onclick="SetInfoSelectedItemAsNull" type="button" class="ms-2 btn btn-sm btn-danger" >
                    <i class="bi bi-x-circle me-2"></i>Hủy
                </button>
            }
        </div>
    </div>
    <div class="d-flex justify-content-between my-2">
        <a href="/receptionist/schedule/doctor" class="btn btn-secondary">Trở về</a>
        <button type="submit" class="btn btn-primary w-25">Lưu</button>
    </div>
    </EditForm>
</div>

<ModalSelectedDoctorForReceptionist IsVisible="@isModalVisible" OnSeletedItem="OnSeletedItem" OnClose="HideModal" />

@code {
    [Parameter]
    public int? WorkScheduleID { get; set; }
    private WorkScheduleDoctorDetailVM doctorDetailVM = new WorkScheduleDoctorDetailVM();
    private HTTPResponseClient<ReceptionistSelectedDoctorVM> infoSelected = new HTTPResponseClient<ReceptionistSelectedDoctorVM>();

    private bool isModalVisible = false;
    private void ShowModal()
    {
        isModalVisible = true;
    }
    private void HideModal()
    {
        isModalVisible = false;
    }
    private async Task OnSeletedItem(int itemID){
        doctorDetailVM.DoctorId = itemID;
        await SetInfoSelectedItem();
    }
    private async Task SetInfoSelectedItem(){
        if(!doctorDetailVM.DoctorId.HasValue || doctorDetailVM.DoctorId.Value == 0){
            infoSelected = new HTTPResponseClient<ReceptionistSelectedDoctorVM>(){
                Data = new ReceptionistSelectedDoctorVM()
            };
        }
        else{
            infoSelected = await receptionistService.GetDoctorSelectedByIdAsync(doctorDetailVM.DoctorId.Value);
        }
    }
    private async Task SetInfoSelectedItemAsNull(){
        doctorDetailVM.DoctorId = null;
        await SetInfoSelectedItem();
    }

    private async Task LoadDataAsDefault(){
        if(WorkScheduleID.HasValue){
            doctorDetailVM = await receptionistService.GetWorkScheduleDoctorAsync(WorkScheduleID.Value);
        }
        else{
            doctorDetailVM = new WorkScheduleDoctorDetailVM(){
                StartDate = DateOnly.FromDateTime(DateTime.Now),
                EndDate = DateOnly.FromDateTime(DateTime.Now)
            };
        }
        await SetInfoSelectedItem();
    }

    protected override async Task OnParametersSetAsync(){
        await LoadDataAsDefault();
        await base.OnParametersSetAsync();
    }

    private async Task HandleValidSubmit()
    {
        if(CanSaveAfterTested()){
            var result = await receptionistService.SaveWorkScheduleDoctorAsync(doctorDetailVM);
            if(result.Data){
                ToastService.ShowSuccess("Lưu lịch làm việc thành công!");
                await LoadDataAsDefault();
            }
            else{
                ToastService.ShowError("Lưu lịch làm việc thất bại!");
            } 
        }        
    }

    private bool CanSaveAfterTested(){ 
        if(doctorDetailVM.StartTime.HasValue && doctorDetailVM.EndTime.HasValue){
            double timeWork = (doctorDetailVM.EndTime!.Value - doctorDetailVM.StartTime!.Value).TotalMinutes;
            if(!(4*60 <= timeWork && timeWork <= 6*60)){
                ToastService.ShowWarning("Số giờ làm việc phải từ 4 tiếng đến 6 tiếng!");
                return false;
            }
        }
        else{
            ToastService.ShowWarning("Giờ bắt đầu và kết thúc là bắt buộc!");
            return false;
        }
        if(!doctorDetailVM.DoctorId.HasValue){
            ToastService.ShowWarning("Bác sĩ là bắt buộc!");
            return false;
        }
        return true;
    }
}
