@inject ReceptionistService receptionistService

<!-- Modal.razor -->
<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg" @onclick:stopPropagation>
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(WorKScheduleId == 0 ? "Tạo lịch làm việc": "Chỉnh sửa lịch làm việc")</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@doctorDetailVM" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @* Nội dung ở đây *@
                <div class="container">
                    <div class="row mb-3">
                        <h3>Thông tin lịch làm việc</h3>
                        <div class="col-md-12">
                            <input type="number" class="form-control d-none" @bind="doctorDetailVM.WorkScheduleId" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Ngày bắt đầu</label>
                            <input type="date" class="form-control" placeholder="Nhập ngày bắt đầu"
                            @bind="doctorDetailVM.StartDate" >
                            <ValidationMessage For="@(() => doctorDetailVM.StartDate)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Ngày kết thúc</label>
                            <input type="date" class="form-control" placeholder="Nhập ngày kết thúc"
                            @bind="doctorDetailVM.EndDate" >
                            <ValidationMessage For="@(() => doctorDetailVM.EndDate)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Giờ bắt đầu</label>
                            <input type="time" class="form-control" placeholder="Nhập giờ bắt đầu"
                            @bind="doctorDetailVM.StartTime" >
                            <ValidationMessage For="@(() => doctorDetailVM.StartTime)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Giờ kết thúc</label>
                            <input type="time" class="form-control" placeholder="Nhập giờ kết thúc"
                            @bind="doctorDetailVM.EndTime" >
                            <ValidationMessage For="@(() => doctorDetailVM.EndTime)" />
                        </div>
                    </div>
                    <div class="row mb-3">
                        <h3>Thông tin bác sĩ</h3>
                        <div class="col-md-12">
                            <div class="dropdown">
                                <label class="form-check-label" for="doctordoctorSearch">Tìm kiếm</label>
                                <input type="text" class="form-control" id="doctorSearch" placeholder="Tìm kiếm theo họ và tên"
                                    value="@doctorSearchText" @oninput="SearchInputDoctorName" autocomplete="off" />
                                    <!-- Danh sách kết quả tìm kiếm (Dropdown) -->
                                    <input type="number" class="form-control d-none" @bind="doctorDetailVM.DoctorId" />
                                    <ValidationMessage For="@(() => doctorDetailVM.DoctorId)" />
                                @if (isDropdownVisible2)
                                {
                                    <ul class="dropdown-menu show" style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var item in doctorSearcheds)
                                        {
                                            <li class="dropdown-item" style="cursor: pointer;" @onclick="()=>SelectedDoctor(item)">
                                                @(item.FullName) , @(item.Specialization)
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Họ và tên</label>
                            <input type="text" class="form-control" placeholder="Nhập họ và tên" readonly="true"
                            @bind="doctorSelected.FullName">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Chuyên môn</label>
                            <input type="text" class="form-control" placeholder="Nhập chuyên môn" readonly="true"
                            @bind="doctorSelected.Specialization">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            @if(!string.IsNullOrWhiteSpace(MessageErrorResult)){
                                <div class="alert alert-danger">@MessageErrorResult</div>
                            }
                        </div>
                        <div class="col-md-6">
                            <button type="submit" class="btn btn-primary w-100">Lưu</button>
                        </div>
                    </div>
                </div>
                </EditForm>

            </div>
            @* <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="Close">Đóng</button>
            </div> *@
        </div>
    </div>
</div>

@code {
    private WorkScheduleDoctorDetailVM doctorDetailVM = new WorkScheduleDoctorDetailVM();
    
    [Parameter]
    public int WorKScheduleId { get; set; }

    protected override async Task OnParametersSetAsync(){
        doctorDetailVM = new WorkScheduleDoctorDetailVM();
        MessageErrorResult = string.Empty;
        isDropdownVisible2 = false;
        doctorSearchText = string.Empty;
        doctorSearcheds = new List<DoctorSearchedForCreateAppointmentVM>();
        doctorSelected = new DoctorSearchedForCreateAppointmentVM();

        if(WorKScheduleId > 0){
            doctorDetailVM = await receptionistService.GetWorkScheduleDoctorAsync(WorKScheduleId);
            if(doctorDetailVM.DoctorId != null){
                doctorSelected = await receptionistService.GetDoctorByIdAsync(doctorDetailVM.DoctorId ?? 0);
            }
        }
        else{
            doctorDetailVM.WorkScheduleId = WorKScheduleId;
        }
        //Console.WriteLine(JsonSerializer.Serialize(doctorDetailVM));
    }

    private string MessageErrorResult = string.Empty;
    
    private bool isDropdownVisible2 = false;
    private string doctorSearchText = string.Empty;
    private List<DoctorSearchedForCreateAppointmentVM> doctorSearcheds = new List<DoctorSearchedForCreateAppointmentVM>();
    private DoctorSearchedForCreateAppointmentVM doctorSelected = new DoctorSearchedForCreateAppointmentVM();

    private async Task SearchInputDoctorName(ChangeEventArgs e)
    {
        doctorSearchText = e.Value?.ToString()?.ToLower()??"";
        if (string.IsNullOrWhiteSpace(doctorSearchText))
        {
            doctorSearcheds.Clear();
            isDropdownVisible2 = false;
        }
        else
        {
            doctorSearcheds = await receptionistService.GetDoctorByNameForReceptionistAsync(doctorSearchText);
            isDropdownVisible2 = doctorSearcheds.Any();
        }
    }
    private void SelectedDoctor(DoctorSearchedForCreateAppointmentVM item){
        //doctorSelected.DoctorId = item.DoctorId;
        doctorDetailVM.DoctorId = item.DoctorId;
        doctorSelected.FullName = item.FullName;
        doctorSelected.Specialization = item.Specialization;

        doctorSearchText = string.Empty;
        isDropdownVisible2 = false;
    }
    private async Task HandleValidSubmit()
    {
        // Xử lý khi form hợp lệ
        Console.WriteLine(JsonSerializer.Serialize(doctorDetailVM));
        var result = await receptionistService.SaveWorkScheduleDoctorAsync(doctorDetailVM);
        if(result){
            MessageErrorResult = "Lưu lịch làm việc thành công! ";
            if(WorKScheduleId <= 0){
                doctorDetailVM = new WorkScheduleDoctorDetailVM();
                doctorDetailVM.WorkScheduleId = WorKScheduleId;
            }
        }
        else{
            MessageErrorResult = "Lưu lịch làm việc thất bại! ";
        }
    }


    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    private async Task Close()
    {
        WorKScheduleId = 0;
        doctorDetailVM = new WorkScheduleDoctorDetailVM();
        MessageErrorResult = string.Empty;

        isDropdownVisible2 = false;
        doctorSearchText = string.Empty;
        doctorSearcheds = new List<DoctorSearchedForCreateAppointmentVM>();
        doctorSelected = new DoctorSearchedForCreateAppointmentVM();
       
        await OnClose.InvokeAsync();
    }
}
