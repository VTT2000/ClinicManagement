@inject ReceptionistService receptionistService

<!-- Modal.razor -->
<div class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg" @onclick:stopPropagation>
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Tạo lịch khám</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@appointmentReceptionistCreateVM" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @* Nội dung ở đây *@
                <div class="container">
                    <div class="row mb-3">
                        <h3>Thông tin bệnh nhân</h3>
                        <div class="col-md-12">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1"
                                    value="false" checked @onchange="IsPatientOldOnChanged">
                                <label class="form-check-label" for="inlineRadio1">Bệnh nhân mới</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2"
                                    value="true" @onchange="IsPatientOldOnChanged">
                                <label class="form-check-label" for="inlineRadio2">Bệnh nhân cũ</label>
                            </div>
                        </div>
                        @if (IsPatientOld)
                        {
                            <div class="col-md-12">
                                <div class="dropdown">
                                    <label class="form-check-label" for="patientSearch">Tìm kiếm</label>
                                    <input type="text" class="form-control" id="patientSearch" placeholder="Tìm kiếm theo họ và tên"
                                        value="@patientSearchText" 
                                        @oninput="SearchInputPatientName" autocomplete="off" />
                                    <!-- Danh sách kết quả tìm kiếm (Dropdown) -->
                                    @if (isDropdownVisible)
                                    {
                                        <ul class="dropdown-menu show" style="max-height: 200px; overflow-y: auto;">
                                            @foreach (var item in patientSearcheds)
                                            {
                                                <li class="dropdown-item" style="cursor: pointer;" @onclick="()=>SelectedPatient(item)">
                                                    @(item.FullName) , @(item.Dob.HasValue ? item.Dob.Value.ToShortDateString() : "") , @(item.Phone)
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        }
                        <div class="col-md-6">
                            <label class="form-label">Họ và tên</label>
                            <input type="text" class="form-control" placeholder="Nhập họ và tên" readonly="@IsPatientOld"
                            @bind="appointmentReceptionistCreateVM.PatientFullName" >
                            <ValidationMessage For="@(() => appointmentReceptionistCreateVM.PatientFullName)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Ngày sinh</label>
                            <input type="date" class="form-control" readonly="@IsPatientOld"
                            @bind="appointmentReceptionistCreateVM.Dob">
                            <ValidationMessage For="@(() => appointmentReceptionistCreateVM.Dob)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Số điện thoại</label>
                            <input type="tel" class="form-control" placeholder="Nhập số điện thoại" readonly="@IsPatientOld"
                            @bind="appointmentReceptionistCreateVM.Phone" >
                            <ValidationMessage For="@(() => appointmentReceptionistCreateVM.Phone)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Địa chỉ</label>
                            <input type="text" class="form-control" placeholder="Nhập địa chỉ" readonly="@IsPatientOld"
                            @bind="appointmentReceptionistCreateVM.Address">
                            <ValidationMessage For="@(() => appointmentReceptionistCreateVM.Address)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" placeholder="Nhập email" readonly="@IsPatientOld"
                            @bind="appointmentReceptionistCreateVM.Email">
                            <ValidationMessage For="@(() => appointmentReceptionistCreateVM.Email)" />
                        </div>
                        @if (!IsPatientOld){
                            <div class="col-md-6">
                                <label class="form-label">Mật khẩu</label>
                                <div class="input-group">
                                    <input type="@(!showPassword ? "text" : "password")" class="form-control" 
                                    placeholder="Nhập mật khẩu" readonly="@IsPatientOld"
                                    @bind="appointmentReceptionistCreateVM.PasswordHash" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="bi bi-@(showPassword ? "eye-slash" : "eye")"></i>
                                    </button>
                                    <ValidationMessage For="@(() => appointmentReceptionistCreateVM.PasswordHash)" />
                                    @code{
                                        private bool showPassword = true;

                                        private void TogglePasswordVisibility()
                                        {
                                            showPassword = !showPassword;
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mb-3">
                        <h3>Thông tin bác sĩ</h3>
                        <div class="col-md-12">
                            <div class="dropdown">
                                <label class="form-check-label" for="doctordoctorSearch">Tìm kiếm</label>
                                <input type="text" class="form-control" id="doctorSearch" placeholder="Tìm kiếm theo họ và tên"
                                    value="@doctorSearchText" @oninput="SearchInputDoctorName" autocomplete="off" />
                                    <!-- Danh sách kết quả tìm kiếm (Dropdown) -->
                                    <input type="number" class="form-control d-none" @bind="appointmentReceptionistCreateVM.DoctorId" />
                                    <ValidationMessage For="@(() => appointmentReceptionistCreateVM.DoctorId)" />
                                @if (doctorSearcheds.Any())
                                {
                                    <ul class="dropdown-menu show" style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var item in doctorSearcheds)
                                        {
                                            <li class="dropdown-item" @onclick="()=>SelectedDoctor(item)">
                                                @(item.FullName) , @(item.Specialization)
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Họ và tên</label>
                            <input type="text" class="form-control" placeholder="Nhập họ và tên" readonly="true"
                            @bind="doctorSelected.FullName">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Chuyên môn</label>
                            <input type="text" class="form-control" placeholder="Nhập chuyên môn" readonly="true"
                            @bind="doctorSelected.Specialization">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <h3>Thông tin lịch khám</h3>
                        <div class="col-md-6">
                            <label class="form-label">Ngày khám</label>
                            <input type="datetime-local" class="form-control" @bind="appointmentReceptionistCreateVM.AppointmentDate">
                            <ValidationMessage For="@(() => appointmentReceptionistCreateVM.AppointmentDate)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Trạng thái</label>
                            <select class="form-select" @bind="appointmentReceptionistCreateVM.Status">
                                <option value="@StatusConstant.AppointmentStatus.Booked" >@StatusConstant.AppointmentStatus.Booked</option>
                                <option value="@StatusConstant.AppointmentStatus.Waiting" >@StatusConstant.AppointmentStatus.Waiting</option>
                            </select>
                        </div>
                        
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            @if(!string.IsNullOrWhiteSpace(MessageErrorResult)){
                                <div class="alert alert-danger">@MessageErrorResult</div>
                            }
                        </div>
                        <div class="col-md-6">
                            <button type="submit" class="btn btn-primary w-100">Lưu</button>
                        </div>
                    </div>
                </div>
                </EditForm>

            </div>
            @* <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="Close">Đóng</button>
            </div> *@
        </div>
    </div>
</div>

@code {
    private AppointmentReceptionistCreateVM appointmentReceptionistCreateVM = new AppointmentReceptionistCreateVM();

    private string MessageErrorResult = string.Empty;

    private string doctorSearchText = string.Empty;
    private async Task HandleValidSubmit()
    {
        // Xử lý khi form hợp lệ
        Console.WriteLine(JsonSerializer.Serialize(appointmentReceptionistCreateVM));
        var result = true;
        @* await receptionistService.CreateAppointmentAsync(appointmentReceptionistCreateVM); *@
        if(result){
            string chuoi = 
                appointmentReceptionistCreateVM.AppointmentDate.ToLongDateString() + " " + 
                appointmentReceptionistCreateVM.PatientFullName + " " +
                appointmentReceptionistCreateVM.Phone;
            appointmentReceptionistCreateVM = new AppointmentReceptionistCreateVM();
            doctorSelected = new DoctorSearchedForCreateAppointmentVM();
            MessageErrorResult = "Tạo lịch khám thành công! " + chuoi;
        }
        else{
            MessageErrorResult = "Tạo lịch khám thất bại! ";
        }
    }
    private List<DoctorSearchedForCreateAppointmentVM> doctorSearcheds = new List<DoctorSearchedForCreateAppointmentVM>();
    private DoctorSearchedForCreateAppointmentVM doctorSelected = new DoctorSearchedForCreateAppointmentVM();

    private async Task SearchInputDoctorName(ChangeEventArgs e)
    {
        doctorSearchText = e.Value?.ToString()?.ToLower()??"";
        if (string.IsNullOrWhiteSpace(doctorSearchText))
        {
            doctorSearcheds.Clear();
        }
        else
        {
            doctorSearcheds = await receptionistService.GetDoctorByNameForReceptionistAsync(doctorSearchText);
        }
    }
    private void SelectedDoctor(DoctorSearchedForCreateAppointmentVM item){
        //doctorSelected.DoctorId = item.DoctorId;
        appointmentReceptionistCreateVM.DoctorId = item.DoctorId;
        doctorSelected.FullName = item.FullName;
        doctorSelected.Specialization = item.Specialization;

        doctorSearcheds.Clear();
        doctorSearchText = "";
    }

    private bool isDropdownVisible = false;
    private string patientSearchText = string.Empty;
    private List<PatientSearchedForCreateAppointmentVM> patientSearcheds = new List<PatientSearchedForCreateAppointmentVM>();
    private async Task SearchInputPatientName(ChangeEventArgs e)
    {
        patientSearchText = e.Value?.ToString()?.ToLower()??"";
        if (string.IsNullOrWhiteSpace(patientSearchText))
        {
            patientSearcheds.Clear();
            isDropdownVisible = false;
        }
        else
        {
            patientSearcheds = await receptionistService.GetPatientByNameForReceptionistAsync(patientSearchText);
            isDropdownVisible = patientSearcheds.Any();
        }
    }

    private void SelectedPatient(PatientSearchedForCreateAppointmentVM item){
        appointmentReceptionistCreateVM.PatientId = item.PatientId;
        appointmentReceptionistCreateVM.PatientFullName = item.FullName;
        appointmentReceptionistCreateVM.Dob = item.Dob;
        appointmentReceptionistCreateVM.Phone = item.Phone;
        appointmentReceptionistCreateVM.Address = item.Address;
        appointmentReceptionistCreateVM.Email = item.Email;
        appointmentReceptionistCreateVM.PasswordHash = item.PasswordHash;

        patientSearchText = string.Empty;
        isDropdownVisible = false;
    }

    private bool IsPatientOld = false;
    private void IsPatientOldOnChanged(ChangeEventArgs e)
    {
        IsPatientOld = bool.Parse(e.Value?.ToString() ?? "false");
        appointmentReceptionistCreateVM.PatientId = null;
        appointmentReceptionistCreateVM.PatientFullName = string.Empty;
        appointmentReceptionistCreateVM.Dob = null;
        appointmentReceptionistCreateVM.Phone = null;
        appointmentReceptionistCreateVM.Address = null;
        appointmentReceptionistCreateVM.Email = string.Empty;
        appointmentReceptionistCreateVM.PasswordHash = string.Empty;
    }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    private async Task Close()
    {
        patientSearchText = string.Empty;
        isDropdownVisible = false;
        doctorSearchText = string.Empty;

        IsPatientOld = false;
        patientSearcheds = new List<PatientSearchedForCreateAppointmentVM>();
        doctorSearcheds = new List<DoctorSearchedForCreateAppointmentVM>();
        appointmentReceptionistCreateVM = new AppointmentReceptionistCreateVM();
        doctorSelected = new DoctorSearchedForCreateAppointmentVM();
        MessageErrorResult = string.Empty;
        await OnClose.InvokeAsync();
    }
}
