@page "/receptionist"
@using System.Text;
@layout AdminLayout
@inject ReceptionistService receptionistService

<div class="container-fluid">
    <!-- Phần tiêu đề và tìm kiếm -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-10">
            <div class="input-group">
                <input @bind="receptionistService.condition.searchNamePatient" type="text" class="form-control" placeholder="Tìm kiếm theo tên bệnh nhân" />
                <input @bind="receptionistService.condition.dateAppointment" type="date" class="form-control" />
                <select @bind="receptionistService.condition.Status" class="form-select">
                    <option value="" selected>Tất cả trạng thái</option>
                    <option value="@StatusConstant.AppointmentStatus.Booked">@StatusConstant.AppointmentStatus.Booked</option>
                    <option value="@StatusConstant.AppointmentStatus.Waiting">@StatusConstant.AppointmentStatus.Waiting</option>
                </select>
                <button @onclick="()=>SearchCondition()" class="btn btn-outline-secondary" type="button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" @onclick="ShowModal"><i class="bi bi-plus-circle me-2"></i>Thêm
                mới</button>
        </div>
    </div>
    <!-- Loading spinner -->
    @if (IsLoaded.HasValue && !IsLoaded.Value)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!(receptionistService.list.StatusCode.HasValue && receptionistService.list.StatusCode.Value == StatusCodes.Status200OK) && !string.IsNullOrWhiteSpace(receptionistService.list.Message))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @receptionistService.list.Message
        </div>
    }
    else
    {
        <!-- Bảng hiển thị danh sách người dùng -->
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered">
                        @* gắn dữ liệu ở đây *@
                        <thead>
                            <tr>
                                <th>Số thứ tự</th>
                                <th>Ngày khám</th>
                                <th>Giờ khám</th>
                                <th>Bệnh nhân</th>
                                <th>Ngày sinh</th>
                                <th>Số điện thoại</th>
                                <th>Bác sĩ</th>
                                <th>Trạng thái</th>
                                <th>Tiến hành</th>
                            </tr>
                        </thead>

                        <tbody>
                            <!-- Dòng 1 -->
                            @{
                                var i = 1 + ((receptionistService.list.Data!.PageNumber-1) * receptionistService.list.Data.PageSize);
                            }
                            @foreach (var item in receptionistService.list.Data.Data!.OrderBy(p => p.Status))
                            {
                                <tr>
                                    <td>@i</td>
                                    <td>@(item.AppointmentDate.HasValue ? item.AppointmentDate.Value.ToString("dd/MM/yyyy") : "")</td>
                                    <td>@(item.AppointmentTime.HasValue? item.AppointmentTime.Value.ToString("HH:mm") : "")</td>
                                    <td>@item.PatientFullName</td>
                                    <td>@((item.Dob.HasValue) ? item.Dob!.Value.ToString("dd/MM/yyyy") : "") </td>
                                    <td>@item.Phone</td>
                                    <td>@item.DoctorFullName</td>
                                    <td>@item.Status</td>
                                    <td>
                                        @if(StatusConstant.AppointmentStatus.Booked.Equals(item.Status)){
                                            <div class="btn-group">
                                                <button @onclick="()=>ChangeStatusWaitingForPatient(item.AppointmentId)" class="btn btn-sm btn-outline-primary">
                                                    Chờ khám
                                                </button>
                                            </div>
                                        }
                                    </td>
                                </tr>
                                i++;
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Phân trang -->
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(receptionistService.list.Data.PageNumber == 1 ? "disabled" : "")">
                            <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(receptionistService.list.Data.PageNumber - 1)">Trước</a>
                        </li>

                        @foreach (var page in GetPageNumbersToDisplay())
                        {
                            if (page == -1)
                            {
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                            }
                            else
                            {
                                <li class="page-item @(page == receptionistService.list.Data.PageNumber ? "active" : "")">
                                    <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(page)">@(page)</a>
                                </li>
                            }
                        }

                        <li class="page-item @(receptionistService.list.Data.PageNumber == receptionistService.list.Data.TotalPages ? "disabled" : "")">
                            <a class="page-link" style="cursor: pointer;" @onclick="() => SelectPage(receptionistService.list.Data.PageNumber + 1)">Sau</a>
                        </li>
                    </ul>
                </nav>

            </div>
        </div>
    }
</div>

<ReceptionistModalAppointmentDetail IsVisible="@isModalVisible" OnClose="HideModal" />

@code {
    private bool? IsLoaded;
    
    private bool isModalVisible = false;

    private List<int> GetPageNumbersToDisplay()
    {
        var list = receptionistService.list.Data;
        const int range = 2; // Số trang hiển thị trước và sau trang hiện tại
        var pages = new List<int>();

        if (list!.TotalPages <= 7)
        {
            for (int i = 1; i <= list.TotalPages; i++) pages.Add(i);
        }
        else
        {
            pages.Add(1);
            if (list.PageNumber > range + 2) pages.Add(-1); // dấu "..."

            for (int i = Math.Max(2, list.PageNumber - range); i <= Math.Min(list.TotalPages - 1, list.PageNumber + range); i++)
            {
                pages.Add(i);
            }

            if (list.PageNumber < list.TotalPages - range - 1) pages.Add(-1); // dấu "..."
            pages.Add(list.TotalPages);
        }

        return pages;
    }

    private async Task SelectPage(int page)
    {
        var list = receptionistService.list.Data;
        if (page >= 1 && page <= list!.TotalPages && page != list.PageNumber)
        {
            list.PageNumber = page;
            await SearchCondition();
        }
    }

    private async Task SearchCondition(){
        IsLoaded = false;
        await receptionistService.GetAllAppointmentPatientAsync2();
        IsLoaded = true;
    }

    private async Task ChangeStatusWaitingForPatient(int appointmentId){
        bool result = await receptionistService.ChangeStatusWaitingForPatient(appointmentId);
        if(result){
            await SearchCondition();
        }
    }
    private void ShowModal()
    {
        isModalVisible = true;
    }

    private async Task HideModal()
    {
        isModalVisible = false;
        await SearchCondition();
    }

    protected override async Task OnInitializedAsync()
    {
        receptionistService.OnChange += StateHasChanged;
        await SearchCondition();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        // Hủy lắng nghe khi component bị hủy
        receptionistService.OnChange -= StateHasChanged;
    }

    // cải thiện code trang này phần tạo và chỉnh sửa
}
