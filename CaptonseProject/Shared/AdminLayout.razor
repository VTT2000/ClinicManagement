@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.Security.Claims

<div class="admin-layout d-flex">
    <!-- Sidebar -->
    <div class="sidebar text-white p-3" style="width: 250px; height: 100vh;">
        <h4 class="text-center">MedLab</h4>
        <hr />
        <ul class="nav flex-column">
            @if (@userRole == RoleConstant.Admin)
            {
                <li class="nav-item">
                    <NavLink class="nav-link text-white" href="/admin" ActiveClass="active" Match="NavLinkMatch.All">Thống
                        kê</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link text-white" href="/user-management" ActiveClass="active"
                        Match="NavLinkMatch.All">Quản lí người dùng</NavLink>
                </li>
            }

            @if (!string.IsNullOrEmpty(userRole))
            {
                if (userRole.Equals(RoleConstant.Receptionist))
                {
                    <li class="nav-item">
                        <NavLink class="nav-link text-white" href="/receptionist">Quản lý danh sách chờ khám</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link text-white" href="/receptionist/schedule/doctor">Quản lý lịch làm việc của bác sĩ</NavLink>
                    </li>
                }

                if (userRole.Equals(RoleConstant.Doctor))
                {
                    <li class="nav-item">
                        <NavLink class="nav-link text-white" href="/doctor">Danh sách bệnh nhân hôm nay</NavLink>
                    </li>
                }

                if (userRole.Equals(RoleConstant.Technician))
                {
                    <li class="nav-item">
                        <NavLink class="nav-link text-white" href="/technician/paraclinical">Danh sách xét nghiệm</NavLink>
                    </li>
                }
            }

        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <header class="content-header d-flex justify-content-between align-items-center">
            <h2>@pageTitle</h2>

            <!-- User Info and Dropdown -->
            <div class="d-flex align-items-center">
                @if (!isAuthenticated)
                {
                    <button class="btn btn-outline-primary me-2" @onclick="() => NavigateToSignIn()">Sign In</button>
                    <button class="btn btn-primary" @onclick="() => NavigateToRegister()">Register</button>
                }
                else
                {
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="userDropdown"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            @username
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end custom-dropdown" aria-labelledby="userDropdown">
                            <!-- User Info -->
                            <li class="px-3 py-2 d-flex align-items-center user-info-header">
                                <img src="" alt="User Avatar" class="user-avatar me-2" />
                                <div>
                                    <h6 class="mb-0">@username</h6>
                                    <small class="text-muted">@userRole</small>
                                </div>
                            </li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>

                            <!-- Menu Items -->
                            @if (userRole != RoleConstant.Patient)
                            {
                                <li><a class="dropdown-item custom-dropdown-item" href="/">
                                        <i class="bi bi-house-door-fill me-2"></i>Quay lại trang chủ
                                    </a>
                                </li>
                            }

                            <li><a class="dropdown-item custom-dropdown-item" href="/profile">
                                    <i class="bi bi-person me-2"></i>Profile
                                </a></li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li><button class="dropdown-item custom-dropdown-item logout-item" @onclick="Logout">
                                    <i class="bi bi-box-arrow-right me-2"></i>Logout
                                </button></li>
                        </ul>
                    </div>
                }
            </div>
        </header>
        <div class="content-body">
            @Body
        </div>
    </div>
</div>

<style>
    /* Ngăn scroll cho toàn trang */
    body {
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .active {
        background-color: #6c757d !important;
        color: white !important;
    }

    /* Layout cho admin */
    .admin-layout {
        height: 100vh;
        width: 100vw;
        overflow: hidden;
    }

    /* Sidebar style */
    .sidebar {
        width: 250px;
        height: 100vh;
        overflow-y: auto;
        /* Cho phép sidebar scroll nếu menu quá dài */
        flex-shrink: 0;
        /* Không cho sidebar thu nhỏ khi không đủ không gian */
        scrollbar-width: thin;
        /* Firefox */
        scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
        /* Firefox */
        background: linear-gradient(to bottom, #8471ce, #8471ce) !important;
    }

    /* Custom scrollbar cho sidebar */
    .sidebar::-webkit-scrollbar {
        width: 6px;
    }

    .sidebar::-webkit-scrollbar-track {
        background: transparent;
    }

    .sidebar::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: 20px;
    }

    /* Main content area */
    .main-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        height: 100vh;
        overflow: hidden;
    }

    /* Header content area */
    .content-header {
        padding: 15px 20px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    /* Body content area - chỉ phần này có scroll */
    .content-body {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        scrollbar-width: thin;
        scrollbar-color: #aaa #f5f5f5;
    }

    /* Custom scrollbar cho content-body */
    .content-body::-webkit-scrollbar {
        width: 8px;
    }

    .content-body::-webkit-scrollbar-track {
        background: #f5f5f5;
    }

    .content-body::-webkit-scrollbar-thumb {
        background: #aaa;
        border-radius: 10px;
    }

    .content-body::-webkit-scrollbar-thumb:hover {
        background: #888;
    }

    /* User Info Styles */
    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* User Dropdown Styles */
    .custom-dropdown {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border: none;
        padding: 8px 0;
        margin-top: 10px;
        min-width: 220px;
        background-color: #ffffff;
    }

    .user-info-header {
        background-color: #f8f9fa;
        border-radius: 8px 8px 0 0;
    }

    .custom-dropdown-item {
        padding: 10px 20px;
        font-size: 14px;
        color: #333333;
        transition: all 0.2s ease;
    }

    .custom-dropdown-item:hover {
        background-color: #f5f5f5;
        color: #007bff;
    }

    .logout-item {
        color: #dc3545;
        font-weight: 500;
    }

    .logout-item:hover {
        background-color: #ffebee;
        color: #dc3545;
    }

    .dropdown-divider {
        margin: 5px 0;
        border-top: 1px solid #e9ecef;
    }
</style>

@code {
    private bool isAuthenticated;
    private string username;
    private string userRole;

    private string pageTitle = "Thống kê";

    protected override async Task OnInitializedAsync()
    {

        // Subscribe vào sự kiện NavigationManager.LocationChanged
        Navigation.LocationChanged += OnLocationChanged;

        // Khởi tạo tiêu đề dựa trên URL hiện tại
        SetPageTitleFromUri(Navigation.Uri);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            // Lấy username từ claim "Name" hoặc "sub"
            username = user.FindFirst(c => c.Type == "Name")?.Value
            ?? user.FindFirst(c => c.Type == "sub")?.Value
            ?? "User";

            // Lấy role từ claim "role"
            userRole = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value ?? "";
        }
    }

    private void NavigateToSignIn()
    {
        Navigation.NavigateTo("/login");
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private async Task Logout()
    {
        // Xóa token khỏi LocalStorage
        await LocalStorage.RemoveItemAsync("token");
        await LocalStorage.RemoveItemAsync("userInfo");

        // Thông báo trạng thái đăng xuất
        if (AuthenticationStateProvider is CustomAuthStateProvider customAuthStateProvider)
        {
            await customAuthStateProvider.MarkUserAsLoggedOut();
        }

        // Chuyển hướng về trang đăng nhập
        Navigation.NavigateTo("/login", true);
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        SetPageTitleFromUri(e.Location);

        // Cần gọi StateHasChanged để cập nhật UI
        InvokeAsync(StateHasChanged);
    }

    // Phương thức để thiết lập tiêu đề dựa trên URL
    private void SetPageTitleFromUri(string uri)
    {
        // Lấy phần path từ URI
        var path = new Uri(uri).PathAndQuery.ToLower();

        // Ánh xạ từ path đến tiêu đề
        pageTitle = path switch
        {
            "/" or "/admin" or "/admin/" => "Thống kê",
            "/user-management" or "/user-management/" => "Quản lí người dùng",
            "/receptionist" or "/receptionist/" => "Tiếp tân",
            "/profile" or "/profile/" => "Hồ sơ cá nhân",
            _ => "Hệ thống quản lý"
        };
    }

    // Thêm phương thức để giải phóng sự kiện khi component bị hủy
    public void Dispose()
    {
        // Bỏ đăng ký sự kiện khi component bị hủy để tránh memory leak
        Navigation.LocationChanged -= OnLocationChanged;
    }

}